#!/usr/bin/env bash

# @param GIT_DIR: directory containing git repositories.
# @param GDRIVE_DIR: local google drive directory. It has to be initialized once
#                    with `grive -a`.
# @param PASS_FILE: File whose first line is passphrase.
# @param RESTORE: If set, restoration is done. Otherwise, backup.
#
# When doing backup:
# For every git repository in specified folder, this script will create a bundle
# and save it to specified local google drive folder. When all bundles are
# copied, it will synchronize local drive with online drive.
# When doin restore:
# Script synchronizes local google drive with online drive.
# It finds the newest snapshot in drive, takes all bundles from it,
# decrypts them and unbundles them to given git directory.
# If git directory does not exist, it will be created.
# If it is not empty, copy of it is saved next to it, with current timestamp.

# TODO: add an option to save partial bundles
# TODO: add input validation, currently does not work I do not know why.
# TODO: add cleanup of old backups, so it does not take more and more memory.

usage() {
cat << EOF
   Usage: $0 -g <git_dir> -d <grive_dir> -p <pass_file> [-r]
   Does encrypted backup/restore of git repositories to/from google drive.
   Uses grive: local google drive must be initialized with grive -a.
   Options:
   -g <git_dir>  Directory containing git repositories.
   -d <grive_dir>  Local google drive directory. You can create it by
                   creating normal directory, moving to it and
                   executing grive -a.
   -p <pass_file>  File whose first line is passphrase that will be used
                   for encryption/decryption.
   [-r]  If set, restore from google drive will be done.
         If not set, backup to google drive will be done.
EOF
}

while getopts "g:d:p:r" o; do
    case "${o}" in
        g)
            GIT_DIR=`readlink -f ${OPTARG}`
            ;;
        d)
            GDRIVE_DIR=`readlink -f ${OPTARG}`
            ;;
        p)
            PASS_FILE=`readlink -f ${OPTARG}`
            ;;
        r)
            RESTORE=1
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

if [ -z "${GIT_DIR}" ] || [ -z "${GDRIVE_DIR}" ] || [ -z "${PASS_FILE}" ]; then
    usage
    exit 1
fi

#if [ ! -d "{GDRIVE_DIR}" ]; then
#    echo "There is no directory ${GDRIVE_DIR}"
#    exit 1
#fi

#if [ ! -f "{PASS_FILE}" ]; then
#    echo "There is no file ${PASS_FILE}"
#    exit 1
#fi

NOW=$(date +"%Y-%m-%d_%H-%M-%S")

if [ -z "${RESTORE}" ]; then # If RESTORE is not set, do backup 
    #if [ ! -d "{GIT_DIR}" ]; then
    #    echo "There is no directory ${GIT_DIR}"
    #    exit 1
    #fi
    # Create bundles and save them to local google drive directory
    mkdir ${GDRIVE_DIR}/${NOW}
    for REPO in `ls ${GIT_DIR}`
    do
        cd ${GIT_DIR}/${REPO}
        if [ -d .git ]; then
            echo "Creating bundle of repository ${REPO}"
            TMP_FILE=`mktemp`
            git bundle create ${TMP_FILE} --all
            openssl aes-256-cbc -salt -in ${TMP_FILE} -out ${GDRIVE_DIR}/${NOW}/${REPO}.bundle.enc -pass file:${PASS_FILE}
            rm ${TMP_FILE}
        fi
    done
    # Synchronize google drive: it will upload bundles.
    cd ${GDRIVE_DIR}
    grive
else # If RESTORE is set, do restoration
    # Synchronize google drive: it will download missing bundles.
    cd ${GDRIVE_DIR}
    grive
    
    LATEST_BACKUP_DIR=${GDRIVE_DIR}/`ls ${GDRIVE_DIR} | sort -r | head -1`
    
    # Prepare git directory that will container repositories.
    # If it already exists, rename it and mark as old one and create empty one.
    if [ ! -d "${GIT_DIR}" ]; then
        mkdir ${GIT_DIR}
    fi
    if [ `ls -A ${GIT_DIR}` ]; then
        mv ${GIT_DIR} ${GIT_DIR}_local_${NOW} #TODO: If this is not sucessfull, stop the script!
        mkdir ${GIT_DIR}
    fi
    
    cd ${GIT_DIR}
    for ENC_BUNDLE in `ls ${LATEST_BACKUP_DIR}`
    do
        REPO=`echo ${ENC_BUNDLE} | sed 's/\.bundle\.enc$//'`
        BUNDLE=${REPO}.bundle
        openssl aes-256-cbc -d -salt -in ${LATEST_BACKUP_DIR}/${ENC_BUNDLE} -out ${BUNDLE} -pass file:${PASS_FILE}
        git clone ${BUNDLE}
        rm ${BUNDLE}
    done
fi
